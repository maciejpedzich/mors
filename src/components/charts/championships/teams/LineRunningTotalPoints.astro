---
import type { ApexOptions } from 'apexcharts';
import { eq, sql } from 'drizzle-orm';

import { db } from '@/db';
import { drivers, sessions, results, teams, rounds } from '@/db/schema';
import BaseChart from '../../BaseChart.astro';
import { a } from 'drizzle-orm/column.d-aa4e525d';

const teamsPointsScoredEachRound = db
  .$with('teams_points_scored_each_round')
  .as(
    db
      .select({
        teamId: drivers.teamId,
        roundId: sessions.roundId,
        totalPoints: sql<number>`SUM(${results.points})`.as('total_points')
      })
      .from(results)
      .innerJoin(drivers, eq(results.driverId, drivers.id))
      .innerJoin(sessions, eq(results.sessionId, sessions.id))
      .where(eq(sessions.type, 'r'))
      .groupBy(drivers.teamId, sessions.roundId)
  );

const teamsRunningTotalPoints = await db
  .with(teamsPointsScoredEachRound)
  .select({
    teamName: teams.name,
    roundName: rounds.name,
    runningTotalPoints: sql<number>`
      SUM(${teamsPointsScoredEachRound.totalPoints}) OVER (
        PARTITION BY
          ${teamsPointsScoredEachRound.teamId}
        ORDER BY
          ${teamsPointsScoredEachRound.roundId} ASC
        RANGE BETWEEN
          UNBOUNDED PRECEDING
          AND CURRENT ROW
      )
    `.mapWith(Number)
  })
  .from(teamsPointsScoredEachRound)
  .innerJoin(teams, eq(teamsPointsScoredEachRound.teamId, teams.id))
  .innerJoin(rounds, eq(teamsPointsScoredEachRound.roundId, rounds.id));

const allTeamColors = [
  '#00d2be',
  '#dc0000',
  '#0600ef',
  '#005aff',
  '#006f62',
  '#0090ff',
  '#2b4562',
  '#b6babd',
  '#ff8700',
  '#900000'
];
const allTeamNames = [
  ...new Set(teamsRunningTotalPoints.map(({ teamName }) => teamName))
];
const allRoundNames = [
  ...new Set(teamsRunningTotalPoints.map(({ roundName }) => roundName))
];

const chartOptions: ApexOptions = {
  title: {
    text: 'Points Totals After Each Race'
  },
  series: allTeamNames.map((name) => ({
    name,
    data: teamsRunningTotalPoints
      .filter(({ teamName }) => teamName === name)
      .map(({ runningTotalPoints }) => runningTotalPoints)
  })),
  colors: allTeamColors,
  chart: {
    animations: {
      enabled: false
    },
    height: 550,
    type: 'line'
  },
  tooltip: {
    shared: false
  },
  xaxis: {
    categories: allRoundNames,
    labels: {
      rotateAlways: true
    }
  },
  yaxis: {
    min: 0,
    max: 700
  },
  markers: {
    size: 4,
    colors: allTeamColors
  },
  legend: {
    fontSize: '16px'
  }
};
---

<BaseChart options={chartOptions} />
